---
// src/pages/tags/index.astro
import Layout from '../../layouts/BaseLayout.astro';
import { getAllVideos, type VideoData } from '../../utils/data.ts';
import { slugify } from '../../utils/slugify.ts';
export const prerender = true;

const allVideos: VideoData[] = await getAllVideos();
const uniqueTags = new Set<string>();
allVideos.forEach(video => {
  if (typeof video.tags === 'string') {
    video.tags.split(',').forEach(tag => {
      const trimmedTag = tag.trim();
      if (trimmedTag.length > 0) {
        uniqueTags.add(trimmedTag);
      }
    });
  }
});

const filteredTags = Array.from(uniqueTags).filter(tag => {
  const lowerCaseTag = tag.toLowerCase();

  // Aturan 1: Filter tag yang mengandung "bokep" diikuti dengan karakter acak, angka, atau strip, atau hanya "bokep".
  // Contoh: "bokep [Flla3Hjihwg]", "bokep -", "bokep 1", "bokep b", "bokep 1241sde5fs", "bokep"
  const isBokepAndRandom = /^bokep(\s+[\w\d\s\-]+)?$/i.test(lowerCaseTag);

  // Aturan 2: Filter tag yang hanya berisi string acak panjang (bukan kata wajar)
  // Ini mendeteksi string yang didominasi oleh konsonan atau urutan karakter yang tidak umum.
  // Ambang batas panjang: lebih dari 5 karakter, dan tidak mengandung vokal yang cukup (misal: kurang dari 2 vokal)
  // atau mengandung urutan karakter yang aneh. Ini bisa disesuaikan.
  const containsVowels = /[aeiouy]/i.test(lowerCaseTag);
  const isPureRandomString = lowerCaseTag.length > 5 && !containsVowels; // Sangat sederhana, bisa diperkuat

  // Aturan 3: Filter tag yang hanya berisi angka atau kombinasi angka-huruf acak tanpa struktur kata yang jelas.
  // Contoh: "5326jhge913", "12345", "abc123xyz"
  // Regex ini mencari string yang didominasi oleh alfanumerik acak tanpa spasi dan tidak terlihat seperti kata biasa.
  const isRandomAlphanumeric = /^(?=.*[0-9])(?=.*[a-z])[a-z0-9]{5,}$/i.test(lowerCaseTag) || /^\d+$/.test(lowerCaseTag);
  // ^\d+$ menangkap hanya angka (misal "12345")
  // ^(?=.*[0-9])(?=.*[a-z])[a-z0-9]{5,}$ menangkap kombinasi angka dan huruf minimal 5 karakter (misal "5326jhge913", "abc123xyz")

  // Aturan 4: Daftar kata-kata tunggal pendek yang secara umum tidak relevan sebagai tag.
  const singleWordShortStopList = new Set([
    'dan', 'atau', 'di', 'ini', 'itu', 'yang', 'video', 'film', 'movie', 'full',
    'gratis', 'online', 'terbaru', 'download', 'hd', 'mp4', 'xxx', 'free', 'new',
    'indo', 'indonesia', 'part', 'episode', 'series', 'clip', 'original', 'official'
    // Tambahkan kata lain yang tidak ingin Anda tampilkan sebagai tag tunggal
  ]);
  const wordsInTag = lowerCaseTag.split(/\s+/);
  const isSingleWordAndInShortStopList = wordsInTag.length === 1 && singleWordShortStopList.has(lowerCaseTag);

  // Menggabungkan semua kondisi pengecualian
  return !(
    isBokepAndRandom ||
    isPureRandomString ||
    isRandomAlphanumeric ||
    isSingleWordAndInShortStopList
  );
});

const sortedTags = filteredTags.sort((a, b) => a.localeCompare(b));

const url = import.meta.env.PUBLIC_SITE_URL;
const nama = import.meta.env.PUBLIC_SITE_NAME;
const desk = import.meta.env.PUBLIC_SITE_DESCRIPTION;

const breadcrumbs = [
  { name: 'Home', url: `${url}` },
  { name: 'Semua Tags' },
];

const schemaBreadcrumb = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": breadcrumbs.map((item, index) => ({
    "@type": "ListItem",
    "position": index + 1,
    "name": item.name,
    ...(item.url && { "item": item.url })
  }))
};

const schemaWebPage = {
  "@context": "https://schema.org",
  "@type": "WebPage",
  "url": `${url}/tags`,
  "name": `Semua Tags - ${nama}`,
  "description": `Jelajahi daftar lengkap tags dan kategori video yang tersedia di ${nama}. Temukan konten favorit Anda berdasarkan topik.`,
  "publisher": {
    "@type": "Organization",
    "name": nama,
    "logo": {
      "@type": "ImageObject",
      "url": `${url}/logo.png`
    }
  },
  "inLanguage": "id-ID",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": `${url}/tags`
  }
};

const pageKeywords = `tags video, daftar tags, ${nama} tags, topik video, genre video, ${sortedTags.slice(0, 5).join(', ')}${sortedTags.length > 5 ? ', dll.' : ''}`;

---

<Layout
  title={`Semua Tags Video - ${nama} | Jelajahi Kategori Lengkap`}
  description={`Jelajahi daftar lengkap tags dan kategori video yang tersedia di ${nama}. Temukan konten favorit Anda berdasarkan topik dan genre. Navigasi cepat ke video yang Anda cari.`}
  siteName={nama}
  siteUrl={url}
  keywords={pageKeywords}
>
    <script type="application/ld+json" set:html={JSON.stringify(schemaBreadcrumb)} />
  <script type="application/ld+json" set:html={JSON.stringify(schemaWebPage)} />

  <main class="tags-index-page">
    <nav class="breadcrumb" aria-label="breadcrumb">
      <ol vocab="https://schema.org/" typeof="BreadcrumbList">
        {breadcrumbs.map((item, index) => (
          <li property="itemListElement" typeof="ListItem">
            {index > 0 && <span class="separator" aria-hidden="true">/</span>}
            {item.url ? (
              <a property="item" typeof="WebPage" href={item.url}>
                <span property="name">{item.name}</span>
              </a>
            ) : (
              <span property="name">{item.name}</span>
            )}
            <meta property="position" content={(index + 1).toString()} />
          </li>
        ))}
      </ol>
    </nav>

    <h1 class="page-title">Daftar Lengkap Tags Video di {nama}</h1>

    {sortedTags.length === 0 ? (
      <p class="no-tags-message">
        Tidak ada tags yang ditemukan. Konten sedang ditambahkan, silakan kembali nanti!
      </p>
    ) : (
      <div class="tags-grid">
        {sortedTags.map(tag => (
          <a href={`${url}/video/${slugify(tag)}/1`} class="tag-card" rel="tag" title={`Lihat semua video dengan tag ${tag}`}>
            {tag}
          </a>
        ))}
      </div>
    )}
  </main>
</Layout>
